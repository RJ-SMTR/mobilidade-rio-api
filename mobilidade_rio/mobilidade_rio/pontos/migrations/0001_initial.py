# Generated by Django 3.1.14 on 2022-12-08 05:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('agency_id', models.CharField(blank=True, max_length=500, primary_key=True, serialize=False)),
                ('agency_name', models.CharField(max_length=500)),
                ('agency_url', models.URLField(max_length=500)),
                ('agency_timezone', models.CharField(max_length=500)),
                ('agency_lang', models.CharField(blank=True, max_length=500, null=True)),
                ('agency_phone', models.CharField(blank=True, max_length=500, null=True)),
                ('agency_branding_url', models.CharField(blank=True, max_length=500, null=True)),
                ('agency_fare_url', models.CharField(blank=True, max_length=500, null=True)),
                ('agency_email', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('service_id', models.CharField(blank=True, max_length=500, primary_key=True, serialize=False)),
                ('monday', models.IntegerField()),
                ('tuesday', models.IntegerField()),
                ('wednesday', models.IntegerField()),
                ('thursday', models.IntegerField()),
                ('friday', models.IntegerField()),
                ('saturday', models.IntegerField()),
                ('sunday', models.IntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='CalendarDates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_id', models.CharField(max_length=500)),
                ('date', models.DateField()),
                ('exception_type', models.CharField(choices=[('1', 'Added service'), ('2', 'Removed service')], max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Frequencies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.CharField(max_length=10)),
                ('end_time', models.CharField(max_length=10)),
                ('headway_secs', models.PositiveIntegerField()),
                ('exact_times', models.IntegerField(blank=True, choices=[(0, 'frequency-based trips'), (1, 'exact times')], null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('route_id', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('route_short_name', models.CharField(max_length=500)),
                ('route_long_name', models.CharField(max_length=500)),
                ('route_desc', models.CharField(blank=True, max_length=500, null=True)),
                ('route_type', models.IntegerField(choices=[(0, 'VLT'), (1, 'Urban trains and subways'), (2, 'Interurban trains and subways'), (3, 'Bus'), (4, 'Ferry'), (5, 'Cable car'), (6, 'Gondola'), (7, 'Funicular'), (11, 'Tram'), (12, 'Monorail')])),
                ('route_url', models.URLField(blank=True, max_length=500, null=True)),
                ('route_branding_url', models.URLField(blank=True, max_length=500, null=True)),
                ('route_color', models.CharField(blank=True, max_length=500, null=True)),
                ('route_text_color', models.CharField(blank=True, max_length=500, null=True)),
                ('route_sort_order', models.PositiveIntegerField(blank=True, null=True)),
                ('continuous_pickup', models.IntegerField(blank=True, choices=[(0, 'embarking with continuous stops'), (1, 'no embarking available'), (2, 'set embarking with the company'), (3, 'set embarking with the driver')], null=True)),
                ('continuous_drop_off', models.IntegerField(blank=True, choices=[(0, 'disembarking with continuous stops'), (1, 'no disembarking available'), (2, 'set disembarking with the company'), (3, 'set disembarking with the driver')], default=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Shapes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shape_id', models.CharField(max_length=500)),
                ('shape_pt_lat', models.FloatField()),
                ('shape_pt_lon', models.FloatField()),
                ('shape_pt_sequence', models.PositiveIntegerField()),
                ('shape_dist_traveled', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='Stops',
            fields=[
                ('stop_id', models.CharField(max_length=500, primary_key=True, serialize=False)),
                ('stop_code', models.CharField(blank=True, max_length=500, null=True)),
                ('stop_name', models.CharField(blank=True, max_length=500, null=True)),
                ('stop_desc', models.CharField(blank=True, max_length=500, null=True)),
                ('stop_lat', models.FloatField(blank=True, null=True)),
                ('stop_lon', models.FloatField(blank=True, null=True)),
                ('zone_id', models.CharField(blank=True, max_length=500, null=True)),
                ('stop_url', models.URLField(blank=True, max_length=500, null=True)),
                ('location_type', models.IntegerField(blank=True, choices=[(0, 'stop'), (1, 'station'), (2, 'entrance/exit'), (3, 'generic node'), (4, 'boarding area')], null=True)),
                ('stop_timezone', models.CharField(blank=True, max_length=500, null=True)),
                ('wheelchair_boarding', models.IntegerField(blank=True, choices=[(0, 'information not available'), (1, 'available'), (2, 'not available')], null=True)),
                ('level_id', models.CharField(blank=True, max_length=500, null=True)),
                ('platform_code', models.CharField(blank=True, max_length=500, null=True)),
                ('parent_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pontos.stops')),
            ],
        ),
        migrations.CreateModel(
            name='Trips',
            fields=[
                ('service_id', models.CharField(max_length=500)),
                ('trip_id', models.CharField(blank=True, max_length=500, primary_key=True, serialize=False)),
                ('trip_headsign', models.CharField(blank=True, max_length=500, null=True)),
                ('trip_short_name', models.CharField(blank=True, max_length=500, null=True)),
                ('direction_id', models.IntegerField(blank=True, choices=[(0, 'ida'), (1, 'volta')], null=True)),
                ('block_id', models.CharField(blank=True, max_length=500, null=True)),
                ('shape_id', models.CharField(blank=True, max_length=500, null=True)),
                ('wheelchair_accessible', models.IntegerField(blank=True, choices=[(0, 'information not available'), (1, 'accessible'), (2, 'not accessible')], null=True)),
                ('bikes_allowed', models.IntegerField(blank=True, choices=[(0, 'information not available'), (1, 'allowed'), (2, 'not allowed')], null=True)),
                ('route_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pontos.routes')),
            ],
        ),
        migrations.CreateModel(
            name='StopTimes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stop_sequence', models.PositiveIntegerField()),
                ('arrival_time', models.TimeField(blank=True, null=True)),
                ('departure_time', models.TimeField(blank=True, max_length=500, null=True)),
                ('stop_headsign', models.CharField(blank=True, max_length=500, null=True)),
                ('pickup_type', models.IntegerField(blank=True, choices=[(0, 'regularly scheduled embarking'), (1, 'no embarking available'), (2, 'set embarking with the company'), (3, 'set embarking with the driver')], default=1, null=True)),
                ('drop_off_type', models.IntegerField(blank=True, choices=[(0, 'regularly scheduled disembarking'), (1, 'no disembarking available'), (2, 'set disembarking with the company'), (3, 'set disembarking with the driver')], default=1, null=True)),
                ('continuous_pickup', models.IntegerField(blank=True, choices=[(0, 'embarking with continuous stops'), (1, 'no embarking available'), (2, 'set embarking with the company'), (3, 'set embarking with the driver')], null=True)),
                ('continuous_drop_off', models.IntegerField(blank=True, choices=[(0, 'disembarking with continuous stops'), (1, 'no disembarking available'), (2, 'set disembarking with the company'), (3, 'set disembarking with the driver')], default=1, null=True)),
                ('shape_dist_traveled', models.FloatField(blank=True, max_length=500, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('timepoint', models.IntegerField(blank=True, choices=[(0, 'exact time'), (1, 'approximate time')], null=True)),
                ('stop_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stop_id_id', related_query_name='stop_id_id', to='pontos.stops')),
                ('trip_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_id_id', related_query_name='trip_id_id', to='pontos.trips')),
            ],
        ),
        migrations.AddConstraint(
            model_name='shapes',
            constraint=models.UniqueConstraint(fields=('shape_id', 'shape_pt_sequence'), name='shape_sequence_id'),
        ),
        migrations.AddField(
            model_name='routes',
            name='agency_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pontos.agency'),
        ),
        migrations.AddField(
            model_name='frequencies',
            name='trip_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pontos.trips'),
        ),
        migrations.AddConstraint(
            model_name='calendardates',
            constraint=models.UniqueConstraint(fields=('service_id', 'date'), name='calendar_date_id'),
        ),
        migrations.AddConstraint(
            model_name='trips',
            constraint=models.UniqueConstraint(fields=('trip_id', 'block_id'), name='trip_block_id'),
        ),
        migrations.AddConstraint(
            model_name='stops',
            constraint=models.CheckConstraint(check=models.Q(models.Q(_negated=True, location_type__in=[0, 1, 2]), models.Q(('stop_lat__isnull', False), ('stop_lon__isnull', False)), _connector='OR'), name='stop_lat_lon'),
        ),
        migrations.AddConstraint(
            model_name='stops',
            constraint=models.CheckConstraint(check=models.Q(models.Q(_negated=True, location_type__in=[2, 3, 4]), ('parent_station__isnull', False), _connector='OR'), name='parent_station_mandatory'),
        ),
        migrations.AddConstraint(
            model_name='stops',
            constraint=models.CheckConstraint(check=models.Q(models.Q(_negated=True, location_type=1), ('parent_station__isnull', True), _connector='OR'), name='parent_station_forbidden'),
        ),
        migrations.AddConstraint(
            model_name='stops',
            constraint=models.UniqueConstraint(fields=('stop_id', 'stop_code'), name='stop_code_id'),
        ),
        migrations.AddConstraint(
            model_name='frequencies',
            constraint=models.UniqueConstraint(fields=('trip_id', 'start_time'), name='frequency_id'),
        ),
        migrations.AddConstraint(
            model_name='frequencies',
            constraint=models.CheckConstraint(check=models.Q(start_time__regex='^[0-9]+:[0-9]{1,2}:[0-9]{1,2}$'), name='start_time_format'),
        ),
        migrations.AddConstraint(
            model_name='frequencies',
            constraint=models.CheckConstraint(check=models.Q(end_time__regex='^[0-9]+:[0-9]{1,2}:[0-9]{1,2}$'), name='end_time_format'),
        ),
    ]
